name: Test Self-hosted Runner

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  spin-up-runner:
    runs-on: ubuntu-latest
    
    env:
      AWS_REGION: eu-west-1
      SUBNETS: ${{ secrets.VPC_SUBNETS }}
      SECURITY_GROUPS: ${{ secrets.SECURITY_GROUPS }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Spin up ECS Runner
        run: |
          NETWORK_CONFIG="{\"awsvpcConfiguration\":{\"subnets\":[${{ env.SUBNETS }}],\"securityGroups\":[${{ env.SECURITY_GROUPS }}],\"assignPublicIp\":\"DISABLED\"}}"
          aws ecs run-task \
            --cluster migration-test-cluster \
            --task-definition migration-test-task-family:8 \
            --launch-type FARGATE \
            --network-configuration "$NETWORK_CONFIG"

      - name: Wait for runner to be available
        run: |
          echo "Waiting for runner to register..."
          sleep 30

  test-on-runner:
    needs: spin-up-runner
    runs-on: self-hosted
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary sqlalchemy

      - name: Test Database Connection
        run: |
          python << EOF
          import sqlalchemy
          from sqlalchemy import create_engine
          
          # Create database connection
          engine = create_engine('${{ env.DATABASE_URL }}')
          
          try:
              # Test connection
              with engine.connect() as connection:
                  result = connection.execute("SELECT 1")
                  print("Successfully connected to the database!")
                  
                  # You can add more database operations here
                  
          except Exception as e:
              print(f"Error connecting to database: {e}")
              exit(1)
          EOF